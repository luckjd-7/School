//Joey Luck
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.*;
import java.lang.*;
import java.io.*;

import static java.lang.Math.floor;

public class cmsc401 {
    public static List[] courses;
    public static int N;
    public static int M;
    public static boolean[][] maxAvail;


    public void Initialize() {
        int N;
        int M;
        boolean[][] maxAvail;
        Scanner input = new Scanner(System.in);
        N = input.nextInt();
        M = input.nextInt();
        maxAvail = new boolean[N][M];
        int count = 0;
        courses = new List[N];
        String variable = input.nextLine();
        //builder(variable,input,count);
        while(count<N) {
            List<String> halls = new ArrayList<>();
            halls.add(variable);
            variable = input.nextLine();
            int num = -1;
            while (variable.contains("H")) {
                halls.add(variable);
                String has = variable.replace("H", "");
                num = Integer.parseInt(has);
                maxAvail[count][num - 1] = true;
                if(input.hasNextLine()) {
                    variable = input.nextLine();
                }
            }
            if(num!=-1) {
                courses[count] = halls;
                ++count;
            }
            else{
                courses[count] = halls;
            }
        }
    }
        boolean bpm(boolean bpGraph[][], int u,
                    boolean seen[], int matchR[])
        {
            // Try every job one by one
            for (int v = 0; v < N; v++)
            {

                if (bpGraph[u][v] && !seen[v])
                {

                    // Mark v as visited
                    seen[v] = true;
                    if (matchR[v] < 0 || bpm(bpGraph, matchR[v],
                            seen, matchR))
                    {
                        matchR[v] = u;
                        return true;
                    }
                }
            }
            return false;
        }

        int maxBPM(boolean bpGraph[][])
        {

            int matchR[] = new int[N];

            // Initially all jobs are available
            for(int i = 0; i < N; ++i)
                matchR[i] = -1;

            // Count of jobs assigned to applicants
            int result = 0;
            for (int u = 0; u < M; u++)
            {
                // Mark all jobs as not seen
                // for next applicant.
                boolean seen[] =new boolean[N] ;
                for(int i = 0; i < N; ++i)
                    seen[i] = false;

                // Find if the applicant 'u' can get a job
                if (bpm(bpGraph, u, seen, matchR))
                    result++;
            }
            return result;
        }
        public static void main(String[] args) {
            cmsc401 method = new cmsc401();
            method.Initialize();
            System.out.println(method.maxBPM(maxAvail));

    }
}
